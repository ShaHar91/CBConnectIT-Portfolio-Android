[
  {
    "id": "1",
    "banner_image": "https://raw.githubusercontent.com/ShaHar91/Portfolio/master/public/portfolio1.png",
    "image": "https://raw.githubusercontent.com/ShaHar91/Portfolio/master/public/project_image.png",
    "title": "Android Core",
    "short_description": "Created this library in order to streamline and simplify the setup of new projects. Instead of copying a lot of classes and reimplementing it differently each time a single dependency was all we needed.",
    "description": "Created this library in order to streamline and simplify the setup of new projects. Instead of copying a lot of classes and reimplementing it differently each time, a single dependency was all we needed.\n\nBecause the company worked on a project basis, it happened that multiple projects were running at the same time and each time the setup we did was almost the same. Copy a lot of base and util classes over to the new project, maybe tweak them a little bit and then continue with the actual project. This resulted in a lot of different code bases and also some scattered knowledge between coworkers. To circumvent this issue, I created a base library where the base classes and some util class (later extension functions) where placed. All accessible by a user friendly Builder class to initialize all needed pieces.\n\nAlso the network layer had a complete makeover to add a (streamlined) default way of work, taking pieces of all previous projects and coworkers to create a cohesive and robust basis. It had also some plug and play functionalities to cater to some project specific needs. To name a few of the pieces that could be adjusted where adding new Serializers, Interceptors, Factories,...\n\nThe library was comprised out of different modules. For example, there was the actual Core module, then we had the Networking module with retrofit usability. Besides that we also had modules for local data, starting with Realm which was Deprecated in favor of Room after a couple of versions.",
    "links": [
      {
        "type": "Github",
        "url": "https://github.com/wisemen-digital/AndroidCore"
      }
    ],
    "tags": [
      {
        "id": "1",
        "name": "Library"
      },
      {
        "id": "2",
        "name": "Coroutines"
      },
      {
        "id": "3",
        "name": "Kotlin"
      },
      {
        "id": "4",
        "name": "XML"
      },
      {
        "id": "5",
        "name": "MVVM"
      }
    ]
  },
  {
    "id": "2",
    "banner_image": "https://raw.githubusercontent.com/ShaHar91/Portfolio/master/public/portfolio2.png",
    "image": "https://raw.githubusercontent.com/ShaHar91/Portfolio/master/public/project_image.png",
    "title": "Measurements",
    "short_description": "The iOS equivalent of converting measurements. With this library, the risk of calculation errors is almost non existent with the use of unit tests on almost every class and function.",
    "description": "The iOS equivalent of converting measurements. With this library, the risk of calculation errors is almost non existent with the use of unit tests on almost every class and function.",
    "links": [
      {
        "type": "Github",
        "url": "https://github.com/ShaHar91/Measurements"
      }
    ],
    "tags": [
      {
        "id": "1",
        "name": "Library"
      },
      {
        "id": "3",
        "name": "Kotlin"
      }
    ]
  },
  {
    "id": "3",
    "banner_image": "https://raw.githubusercontent.com/ShaHar91/Portfolio/master/public/portfolio3.png",
    "image": "https://raw.githubusercontent.com/ShaHar91/Portfolio/master/public/project_image.png",
    "title": "Pok√©dex",
    "short_description": "A try-out project with Jetpack Compose, where I use Koin for DI, and try to implement clean architecture by using a clear separation of concerns.",
    "description": "A try-out project with Jetpack Compose, where I use Koin for DI, and try to implement clean architecture by using a clear separation of concerns.",
    "links": [
      {
        "type": "Github",
        "url": "https://github.com/ShaHar91/DemoPokedex"
      },
      {
        "type": "PlayStore",
        "url": "https://play.google.com/store/apps/details?id=be.christiano.demoPokedex"
      }
    ],
    "tags": [
      {
        "id": "2",
        "name": "Coroutines"
      },
      {
        "id": "3",
        "name": "Kotlin"
      },
      {
        "id": "6",
        "name": "Jetpack Compose"
      },
      {
        "id": "7",
        "name": "Koin"
      },
      {
        "id": "5",
        "name": "MVVM"
      }
    ]
  },
  {
    "id": "4",
    "banner_image": "https://raw.githubusercontent.com/ShaHar91/Portfolio/master/public/portfolio4.jpg",
    "image": "https://raw.githubusercontent.com/ShaHar91/Portfolio/master/public/project_image.png",
    "title": "FoodWatcher",
    "short_description": "With this project I implemented a different data persistent layer depending on the build flavor name. One is pure local Room database use, the other is a link to Firebase.",
    "description": "With this project I implemented a different data persistent layer depending on the build flavor name. One is pure local Room database use, the other is a link to Firebase.",
    "links": [
      {
        "type": "Github",
        "url": "https://github.com/ShaHar91/FoodWatcher-Android"
      }
    ],
    "tags": [
      {
        "id": "2",
        "name": "Coroutines"
      },
      {
        "id": "3",
        "name": "Kotlin"
      },
      {
        "id": "4",
        "name": "XML"
      },
      {
        "id": "5",
        "name": "MVVM"
      }
    ]
  },
  {
    "id": "5",
    "banner_image": "https://raw.githubusercontent.com/ShaHar91/Portfolio/master/public/portfolio5.png",
    "image": "https://raw.githubusercontent.com/ShaHar91/Portfolio/master/public/project_image.png",
    "title": "PoemCollection Backend",
    "short_description": "A backend created with the Ktor Server library to see what is possible with this technology. Still work in progress to actually request and process the data in an app.",
    "description": "A backend created with the Ktor Server library to see what is possible with this technology. Still work in progress to actually request and process the data in an app.",
    "links": [
      {
        "type": "Github",
        "url": "https://github.com/ShaHar91/PoemCollection-backend-ktor"
      }
    ],
    "tags": [
      {
        "id": "8",
        "name": "Ktor"
      },
      {
        "id": "3",
        "name": "Kotlin"
      },
      {
        "id": "7",
        "name": "Koin"
      }
    ]
  }
]