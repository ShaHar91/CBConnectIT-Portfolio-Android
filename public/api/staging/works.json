[
  {
    "id": "1",
    "banner_image": "https://raw.githubusercontent.com/ShaHar91/Portfolio/master/public/portfolio1.png",
    "image": "https://raw.githubusercontent.com/ShaHar91/Portfolio/master/public/project_image.png",
    "title": "Android Core",
    "short_description": "Created this library in order to streamline and simplify the setup of new projects. Instead of copying a lot of classes and reimplementing it differently each time a single dependency was all we needed.",
    "description": "Created this library in order to streamline and simplify the setup of new projects. Instead of copying a lot of classes and reimplementing it differently each time, a single dependency was all we needed.\n\nBecause the company worked on multiple projects a year, it was quite usual that we did a lot of manual setup like copy a lot of base and util classes over to the new project, maybe tweak them a little bit and then continue with the actual project. This resulted in a lot of differences in the code bases and scattered knowledge between coworkers. To circumvent this issue, I created a base library where the base classes and some util class (later extension functions) where placed. All accessible by a user friendly Builder class to initialize all needed pieces.\n\nAlso the network layer had a complete makeover to add a (streamlined) default way of work, taking pieces of all previous projects and coworkers to create a cohesive and robust basis. It had also some plug and play functionalities to cater to some project specific needs.\n\nThe library was comprised out of different modules. For example, there was the actual Core module, then we had the Networking module with retrofit usability. Besides that we also had modules for local data, starting with Realm which was Deprecated in favor of Room after a couple of versions.\n\nCheck the Github for more information and a sample!",
    "links": [
      {
        "type": "Github",
        "url": "https://github.com/wisemen-digital/AndroidCore"
      }
    ],
    "tags": [
      {
        "id": "1",
        "name": "Library"
      },
      {
        "id": "2",
        "name": "Coroutines"
      },
      {
        "id": "3",
        "name": "Kotlin"
      },
      {
        "id": "4",
        "name": "XML"
      },
      {
        "id": "5",
        "name": "MVVM"
      }
    ]
  },
  {
    "id": "2",
    "banner_image": "https://raw.githubusercontent.com/ShaHar91/Portfolio/master/public/portfolio2.png",
    "image": "https://raw.githubusercontent.com/ShaHar91/Portfolio/master/public/project_image.png",
    "title": "Measurements",
    "short_description": "Android had no standardized way to define Measurements and convert between other Measurements within the same Unit. I noticed iOS had a nice API for this, so I took that as an inspiration and essentialy created the iOS equivalent for Android.",
    "description": "Android had no standardized way to define Measurements and convert between other Measurements within the same Unit. I noticed iOS had a nice API for this, so I took that as an inspiration and essentialy created the iOS equivalent for Android.\n\nConverting between Measurements in the same Unit is very easy by invoking a function which takes in the expected Unit as a parameter. Unit Tests have been created to ensure stability and quality. Functions for calculations have also been added. Adding, subtracting, ... are all possible with Measurements of the same Unit. In case a different scale is being used in a calculation (e.g.: nauticalMiles + miles), both scales will be converted to the base Unit (meters) and only then will they be added onto each other. Comparing (+ equals) scales within the same Unit is also possible.\n\nA Measurement can always be formatted in a standardized way with the correct symbol appended to it. There is also a possibility to add the amount of fraction digits in case you want the more fine grained results.",
    "links": [
      {
        "type": "Github",
        "url": "https://github.com/ShaHar91/Measurements"
      }
    ],
    "tags": [
      {
        "id": "1",
        "name": "Library"
      },
      {
        "id": "3",
        "name": "Kotlin"
      }
    ]
  },
  {
    "id": "3",
    "banner_image": "https://raw.githubusercontent.com/ShaHar91/Portfolio/master/public/portfolio3.png",
    "image": "https://raw.githubusercontent.com/ShaHar91/Portfolio/master/public/project_image.png",
    "title": "Pok√©dex",
    "short_description": "A try-out project with Jetpack Compose, where I use Koin for DI, and try to implement clean architecture by using a clear separation of concerns.",
    "description": "This project was a nice opportunity to try out a couple of new things in combination with each other. For DI, Koin was used, as it is a lightweight Dependency Injection framework and does not add too much \"magical autogenerated code\" via the use of annotations. This way I could try to grasp what was happening under the hood more easily to actually try and understand dependency injection some more.\nJetpack Compose was used for the layout to see what it was and how it behaves in a project. In conjunction with Jetpack Compose, I also used the recommended way of a State object with the UiEVent and Event classes.\n\nThese new classes ensured the layout only gets updated whenever the state is being updated and actions will trigger an event which will then trigger a change in the state or trigger other events back to the UI. By doing things this way (the new classes + DI) it should be a lot easier to test all the other components of the applications. ViewModels, Repositories, Extension functions, Use Cases,... can all be isolated and tested seperate from each other.",
    "links": [
      {
        "type": "Github",
        "url": "https://github.com/ShaHar91/DemoPokedex"
      },
      {
        "type": "PlayStore",
        "url": "https://play.google.com/store/apps/details?id=be.christiano.demoPokedex"
      }
    ],
    "tags": [
      {
        "id": "2",
        "name": "Coroutines"
      },
      {
        "id": "3",
        "name": "Kotlin"
      },
      {
        "id": "6",
        "name": "Jetpack Compose"
      },
      {
        "id": "7",
        "name": "Koin"
      },
      {
        "id": "5",
        "name": "MVVM"
      }
    ]
  },
  {
    "id": "4",
    "banner_image": "https://raw.githubusercontent.com/ShaHar91/Portfolio/master/public/portfolio4.jpg",
    "image": "https://raw.githubusercontent.com/ShaHar91/Portfolio/master/public/project_image.png",
    "title": "FoodWatcher",
    "short_description": "With this project I implemented a different data persistent layer depending on the build flavor name. One is pure local Room database use, the other is a link to Firebase.",
    "description": "With this project I implemented a different data persistent layer depending on the build flavor name. One is pure local Room database use, the other is a link to Firebase. This was mainly a try-out to understand the use of interfaces and actual implementation for different build flavors.\n\nIn this case, Koin is being used to actually add the correct dependencies per build flavor. Interfaces for the Repositories are being used where the function just expects specific return types which the app itself then can process into the needed data. For the Room Build flavor, DAO's are created and Entity objects, these objects can just be inserted, queried and deleted by using the built in annotations and the LiveData support. For Firebase, the collection of the Firestore is being queried, inserted,... and then converted into livedata which is then being returned by the Repository.\n\nAlso fastlane was added to simplify the process of getting builds out faster to the Firebase Release track.",
    "links": [
      {
        "type": "Github",
        "url": "https://github.com/ShaHar91/FoodWatcher-Android"
      }
    ],
    "tags": [
      {
        "id": "2",
        "name": "Coroutines"
      },
      {
        "id": "3",
        "name": "Kotlin"
      },
      {
        "id": "4",
        "name": "XML"
      },
      {
        "id": "5",
        "name": "MVVM"
      }
    ]
  },
  {
    "id": "5",
    "banner_image": "https://raw.githubusercontent.com/ShaHar91/Portfolio/master/public/portfolio5.png",
    "image": "https://raw.githubusercontent.com/ShaHar91/Portfolio/master/public/project_image.png",
    "title": "PoemCollection Backend",
    "short_description": "A backend created with the Ktor Server library to see what is possible with this technology. Still work in progress to actually request and process the data in an app.",
    "description": "A backend created with the Ktor Server library to see what is possible with this technology. Still work in progress to actually request and process the data in an app.",
    "links": [
      {
        "type": "Github",
        "url": "https://github.com/ShaHar91/PoemCollection-backend-ktor"
      }
    ],
    "tags": [
      {
        "id": "8",
        "name": "Ktor"
      },
      {
        "id": "3",
        "name": "Kotlin"
      },
      {
        "id": "7",
        "name": "Koin"
      }
    ]
  }
]